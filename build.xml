<project name="SalesforceMobileSDK" default="usage" basedir=".">

  <!-- Default target: describes useful targets -->
  <target name="usage" description="Key targets of this build.xml">
    <echo>
      ant create_native -Dapp.name={appName} -Dtarget.dir={targetDir} -Dpackage.name={packageName} [-Duse.smartstore=true]
      Creates a native application, for instance:
      ant create_native -Dapp.name=MyFirstNative -Dtarget.dir=./firstnative -Dpackage.name=com.acme.firstnative 

      ant create_hybrid_local -Dapp.name={appName} -Dtarget.dir={targetDir} -Dpackage.name={packageName} [-Duse.smartstore=true]
      Creates a local hybrid application, for instance:
      ant create_hybrid_local -Dapp.name=MyFirstHybridLocal -Dtarget.dir=./firsthybridlocal -Dpackage.name=com.acme.firsthybridlocal 

      ant create_hybrid_remote -Dapp.name={appName} -Dtarget.dir={targetDir} -Dpackage.name={packageName} -Dstart.page={startPage} [-Duse.smartstore=true]
      Creates a remote hybrid application, for instance:
      ant create_hybrid_remote -Dapp.name=MyFirstHybridRemote -Dtarget.dir=./firsthybridremote -Dpackage.name=com.acme.firsthybridremote -Dstart.page=/apex/TestPageA

      Arguments:
      * appName: the name for the new application 
      * targetDir: the directory where the code should reside 
      * packageName: the java package for the new application e.g. com.acme.mobileapp
      * startPage: the start page for the remote application e.g. /apex/MyFirstApp
      * only pass -Duse.smartstore=true if you want SmartStore support
    </echo>
  </target>

  <!-- Location of SalesforceMobileSDK -->
  <property name="sdk.dir" location=""/>

  <!-- Location of SalesforceMobileSDK relative to the target app-->
  <property name="sdk.dir.from.target" location="" relative="true" basedir="${target.dir}"/>
    
  <!-- Relative location of native and hybrid apps' bootconfig files. -->
  <property name="hybrid.bootconfig.path" value="assets/www/bootconfig.json" />
  <property name="native.bootconfig.path" value="res/values/bootconfig.xml" />

  <!-- Target to compute package directory path and other properties -->
  <target name="-pre">
    <!-- Following returns basedir with dots replaced by file separators -->
    <pathconvert property="basedirunpackaged">
      <path path="." />
      <mapper type="unpackage" from="*" to="*" />
    </pathconvert>
    <!-- Following returns basedir + package.name with dot replaced by file separators -->
    <pathconvert property="temp.package.dir">
      <path path="${package.name}" />
      <mapper type="unpackage" from="*" to="*" />      
    </pathconvert>
    <!-- Following returns package directory from the package name e.g. com/acme/mobileapp for com.acme.mobileapp -->
    <pathconvert property="package.dir">
      <path path="${temp.package.dir}" />
      <globmapper from="${basedirunpackaged}/*" to="*" handledirsep="true" />
    </pathconvert>

    <!-- Application's subclass will be called ${app.name}App" -->
    <property name="app.classname" value="${app.name}App" />
  </target>

  <!-- Target to create a native application -->
  <target name="create_native" description="Create native application" 
          depends="-pre_native,-create,-use_smartstore,-next_steps_info,-oauth_info_native" />

  <target name="-pre_native" depends="-pre">
    <property name="template.dir" value="${sdk.dir}/native/TemplateApp" />
    <property name="template.app.name" value="Template" />
    <property name="template.app.classname" value="TemplateApp" />
    <property name="template.package.name" value="com.salesforce.samples.templateapp" />
    <property name="template.package.dir" value="com/salesforce/samples/templateapp" />
    <property name="bootconfig.path" value="${native.bootconfig.path}" />
  </target>

  <!-- Target to create a hybrid remote application -->
  <target name="create_hybrid_remote" description="Create remote hybrid application" 
          depends="-pre_hybrid_remote,-create,-use_smartstore,-post_hybrid_remote,-next_steps_info,-oauth_info_hybrid">
  </target>

  <target name="-pre_hybrid_remote" depends="-pre">
    <property name="template.dir" value="${sdk.dir}/hybrid/SampleApps/VFConnector" />
    <property name="template.app.name" value="VFConnector" />
    <property name="template.app.classname" value="VFConnectorApp" />
    <property name="template.package.name" value="com.salesforce.samples.vfconnector" />
    <property name="template.package.dir" value="com/salesforce/samples/vfconnector" />
    <property name="bootconfig.path" value="${hybrid.bootconfig.path}" />
  </target>

  <target name="-post_hybrid_remote">
    <echo message="Changing remote page reference in ${hybrid.bootconfig.path}" />
    <replaceregexp match="/apex/BasicVFPage" flags="g" replace="${start.page}"
                   file="${target.dir}/${hybrid.bootconfig.path}" />
  </target>

  <!-- Target to create a hybrid local application -->
  <target name="create_hybrid_local" description="Create local hybrid application" 
          depends="-pre_hybrid_local,-create,-use_smartstore,-next_steps_info,-oauth_info_hybrid" />

  <target name="-pre_hybrid_local" depends="-pre">
    <property name="template.dir" value="${sdk.dir}/hybrid/SampleApps/ContactExplorer" />
    <property name="template.app.name" value="ContactExplorer" />
    <property name="template.app.classname" value="ContactExplorerApp" />
    <property name="template.package.name" value="com.salesforce.samples.contactexplorer" />
    <property name="template.package.dir" value="com/salesforce/samples/contactexplorer" />
    <property name="bootconfig.path" value="${hybrid.bootconfig.path}" />
  </target>

  <!-- Internal target, called by create_* targets -->
  <target name="-create">
    <fileset id="target.files" dir="${target.dir}">
      <include name="AndroidManifest.xml" />
      <include name=".project" />
      <include name="build.xml" />
      <include name="res/values/strings.xml" />
      <include name="${bootconfig.path}" />
      <include name="src/${template.package.dir}/*.java" />
    </fileset>

    <mkdir dir="${target.dir}" />

    <copy todir="${target.dir}">
      <fileset dir="${template.dir}" />
    </copy>

    <echo message="Adjusting SalesforceSDK library project reference" />
    <replaceregexp match="=.*SalesforceSDK" flags="g" replace="=${sdk.dir.from.target}/native/SalesforceSDK">
      <fileset file="${target.dir}/project.properties" />
    </replaceregexp>

    <echo message="Renaming application class to ${app.classname}" />
    <replaceregexp match="${template.app.classname}" flags="g" replace="${app.classname}">
      <fileset refid="target.files" />
    </replaceregexp>
    <move file="${target.dir}/src/${template.package.dir}/${template.app.classname}.java" 
          tofile="${target.dir}/src/${template.package.dir}/${app.classname}.java" />

    <echo message="Renaming application to ${app.name}" />
    <replaceregexp match="${template.app.name}" flags="g" replace="${app.name}">
      <fileset refid="target.files" />
    </replaceregexp>

    <echo message="Changing java package reference to ${package.name}" />
    <replaceregexp match="${template.package.name}" flags="g" replace="${package.name}">
      <fileset refid="target.files" />
    </replaceregexp>

    <mkdir dir="${target.dir}/src/${package.dir}"/>

    <move todir="${target.dir}/src">
      <fileset file="${target.dir}/src/${template.package.dir}/*.java" />
    </move>

    <delete dir="${target.dir}/src/com" />

    <move todir="${target.dir}/src/${package.dir}">
      <fileset file="${target.dir}/src/*.java" />
    </move>
  </target>

  <target name="-use_smartstore" if="use.smartstore">
    <echo message="Adding smartstore support" />
    <copy file="${sdk.dir}/external/sqlcipher/assets/icudt46l.zip" todir="${target.dir}/assets" />

    <echo message="Adding SmartStore library reference in project.properties" />
    <concat destfile="${target.dir}/project.properties" append="true">android.library.reference.2=${sdk.dir.from.target}/hybrid/SmartStore</concat>

    <echo message="Extending SalesforceSDKManagerWithSmartStore instead of SalesforceSDKManager" />
    <replaceregexp match="SalesforceSDKManager" flags="g" replace="SalesforceSDKManagerWithSmartStore">
      <fileset file="${target.dir}/src/${package.dir}/${app.classname}.java" />
    </replaceregexp>
    <replaceregexp match="com.salesforce.androidsdk.app.SalesforceSDKManagerWithSmartStore" flags="g" replace="com.salesforce.androidsdk.smartstore.app.SalesforceSDKManagerWithSmartStore">
      <fileset file="${target.dir}/src/${package.dir}/${app.classname}.java" />
    </replaceregexp>
  </target>

  <!-- Internal targets, next steps info -->
  <target name="-next_steps_info">
    <condition property="library.projects" 
               value="the native/SalesforceSDK and the hybrid/SmartStore library projects"
               else="the native/SalesforceSDK library project">
      <isset property="use.smartstore" />
    </condition>
    <echo>
      Your application project is ready in ${target.dir}

      To build the new application, do the following:
        cd ${target.dir}
        $ANDROID_SDK_DIR/android update project -p .
        ant clean debug

      To run the application, start an emulator or plugin your device and run:
        ant installd

      To use your new application in Eclipse, do the following:
        import ${library.projects} and the ${target.dir} project in your workspace
        build all
        run your application by choosing "Run as Android application"
    </echo>
  </target>

  <target name="-oauth_info_native">
    <echo>
      Before you ship, make sure to plug in your oauth client id, callback url and oauth scopes in:
        ${target.dir}/${native.bootconfig.path}
    </echo>
  </target>

  <target name="-oauth_info_hybrid">
    <echo>
      Before you ship, make sure to plug in your oauth client id and callback url in:
        ${target.dir}/${hybrid.bootconfig.path}
    </echo>
  </target>

</project>
